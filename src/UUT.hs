
-- This file has been generated by the CAVI-ART CLIR-to-Haskell transformer tool


module UUT where


import qualified Arrays as A
import qualified Bags as B
import qualified Sets as S
import qualified Sequences as Q
import Assertion
import Data.List

uutNargs :: Int
uutNargs = 2

uutMethods :: [String]
uutMethods = ["uutPrec", "uutMethod", "uutPost"]

uutName :: String
uutName = "insert"

uutPrec :: Int -> [Int] -> Bool
uutPrec x xs = sorted xs

sorted []       = True
sorted [x]      = True
sorted (x:y:xs) = x <= y && sorted (y:xs)


uutMethod :: Int -> [Int] -> [Int]
uutMethod x [] = [x]
uutMethod x (y:ys) | x <= y    = x:y:ys
                   | otherwise = y : uutMethod x ys

uutPost :: Int -> [Int] -> [Int] -> Bool
uutPost x xs ys = ys == sort (x:xs)